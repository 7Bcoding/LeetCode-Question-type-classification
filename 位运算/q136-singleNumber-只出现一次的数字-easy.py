from functools import reduce


class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
        你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
        示例 1:
        输入: [2,2,1]     输出: 1
        示例2:
        输入: [4,1,2,1,2] 输出: 4
        """
        # 解法：位运算——对于这道题，可使用异或运算⊕。异或运算有以下三个性质：
        # 1.任何数和 0 做异或运算，结果仍然是原来的数，即 a⊕0=a
        # 2.任何数和其自身做异或运算，结果是 0，即 a⊕a=0
        # 3.异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b
        # 假设数组中有2m+1个数，其中有m个数出现2次，1个数出现一次，
        # 令a1,a2,a3、...、am为出现两次的m个数，am+1为出现一次的数
        # 则异或运算的结果可以写成：
        # (a1⊕a2)⊕(a2⊕a2)⊕...(am⊕am)⊕am+1，最终得到：
        # 0⊕0⊕0...0⊕am+1 = am+1

        return reduce(lambda x, y: x ^ y, nums)