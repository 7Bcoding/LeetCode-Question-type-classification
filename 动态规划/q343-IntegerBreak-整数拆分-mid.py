class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        # 解法：动态规划
        # 1. 对于的正整数 n，当 n ≥ 2 时，可以拆分成至少两个正整数的和。令 k 是拆分出的第一个正整数，则剩下的部分是n-k，n-k可以不继续拆分，
        # 或者继续拆分成至少两个正整数的和，由于每个正整数对应的最大乘积取决于比它小的正整数对应的最大乘积，因此可以使用动态规划求解。
        # 2. 创建数组 dp，其中 dp[i] 表示将正整数i拆分成至少两个正整数的和之后，这些正整数的最大乘积。特别地0不是正整数，1是最小的正整数，0和1都不能拆分，因此
        # dp[0] = dp[1] = 0。
        # 3. 当 i ≥ 2 时，假设对正整数 i 拆分出的第一个正整数是 j（1≤ j <i），则有以下两种方案：
        #   a. 将 i 拆分成 j 和 i−j 的和，且 i−j 不再拆分成多个正整数，此时的乘积是 j * (i−j)
        #   b. 将 i 拆分成 j 和 i−j 的和，且 i−j 继续拆分成多个正整数，此时的乘积是 j * dp[i−j]
        # 因此，当 j 固定时，有 dp[i] = max(j * (i−j) , j * dp[i−j])
        # 由于 j 取值范围是 1 到 i−1，需要遍历所有的 j 得到 dp[i] 的最大值，因此可以得到状态转移方程如下：
        # --- dp[i] = max(dp[i], j * (i - j), j * dp[i - j])
        # 最终得到 dp[n] 的值即为将正整数 n 拆分成至少两个正整数的和之后，这些正整数的最大乘积。

        dp = [0] * (n+1)
        tmp = 0
        for i in range(2, n+1):
            for j in range(1, i):
                dp[i] = max(dp[i], dp[i-j] * j, (i-j) * j)
                if dp[i] >= tmp:
                    tmp = dp[i]
                else:
                    break
            tmp = 0
        return dp[n]

